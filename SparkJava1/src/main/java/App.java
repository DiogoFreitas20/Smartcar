
import static spark.Spark.*;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.smartcar.sdk.*;
import com.smartcar.sdk.data.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author enta
 */
public class App extends javax.swing.JFrame {

    private final AuthClient client;
    private String access;
    private static Gson gson = new Gson();

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        port(8000);
        String clientId = "48def061-6792-44e2-9347-332ef70aac55";
        String clientSecret = "393f3e6d-4e4f-4871-a08f-78da1d516d34";
        String redirectUri = "http://localhost:8000/callback";
        String[] scope = {"read_engine_oil read_battery read_charge read_fuel read_location control_security read_odometer read_tires read_vehicle_info read_vin"};

        boolean testMode = true;

        client = new AuthClient(
                clientId,
                clientSecret,
                redirectUri,
                scope,
                testMode
        );
        CarController cc = new CarController();
        cc.getAccess(client);
        access = System.getProperty("access");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Login = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        res = new javax.swing.JTextArea();
        Vehicle = new javax.swing.JButton();
        Vehicles = new javax.swing.JButton();
        Engine = new javax.swing.JButton();
        Battery = new javax.swing.JButton();
        Fuel = new javax.swing.JButton();
        Location = new javax.swing.JButton();
        Odometer = new javax.swing.JButton();
        Tires = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 0, 204));

        Login.setBackground(new java.awt.Color(0, 51, 0));
        Login.setForeground(new java.awt.Color(255, 255, 255));
        Login.setText("Login");
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        res.setBackground(new java.awt.Color(255, 255, 255));
        res.setColumns(20);
        res.setRows(5);
        jScrollPane1.setViewportView(res);

        Vehicle.setBackground(new java.awt.Color(51, 51, 255));
        Vehicle.setForeground(new java.awt.Color(255, 255, 255));
        Vehicle.setText("Vehicle");
        Vehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VehicleActionPerformed(evt);
            }
        });

        Vehicles.setBackground(new java.awt.Color(51, 51, 255));
        Vehicles.setForeground(new java.awt.Color(255, 255, 255));
        Vehicles.setText("Vehicles");
        Vehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VehiclesActionPerformed(evt);
            }
        });

        Engine.setBackground(new java.awt.Color(51, 51, 255));
        Engine.setForeground(new java.awt.Color(255, 255, 255));
        Engine.setText("Engine");
        Engine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EngineActionPerformed(evt);
            }
        });

        Battery.setBackground(new java.awt.Color(51, 51, 255));
        Battery.setForeground(new java.awt.Color(255, 255, 255));
        Battery.setText("Battery");
        Battery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BatteryActionPerformed(evt);
            }
        });

        Fuel.setBackground(new java.awt.Color(51, 51, 255));
        Fuel.setForeground(new java.awt.Color(255, 255, 255));
        Fuel.setText("Fuel");
        Fuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FuelActionPerformed(evt);
            }
        });

        Location.setBackground(new java.awt.Color(51, 51, 255));
        Location.setForeground(new java.awt.Color(255, 255, 255));
        Location.setText("Location");
        Location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationActionPerformed(evt);
            }
        });

        Odometer.setBackground(new java.awt.Color(51, 51, 255));
        Odometer.setForeground(new java.awt.Color(255, 255, 255));
        Odometer.setText("Odometer");
        Odometer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OdometerActionPerformed(evt);
            }
        });

        Tires.setBackground(new java.awt.Color(51, 51, 255));
        Tires.setForeground(new java.awt.Color(255, 255, 255));
        Tires.setText("Tires");
        Tires.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TiresActionPerformed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(102, 0, 0));
        Clear.setForeground(new java.awt.Color(255, 255, 255));
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Login)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Vehicle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Vehicles)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Engine)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Battery)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Fuel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Location)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Odometer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tires))
                            .addComponent(Clear))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Login)
                    .addComponent(Vehicle)
                    .addComponent(Vehicles)
                    .addComponent(Engine)
                    .addComponent(Battery)
                    .addComponent(Fuel)
                    .addComponent(Location)
                    .addComponent(Odometer)
                    .addComponent(Tires))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Clear)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        // TODO add your handling code here:
        OpenBrowser openBrowser = new OpenBrowser("http://localhost:8000/login");
        res.append("Brownser should be open!\n");
    }//GEN-LAST:event_LoginActionPerformed

    private void VehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VehicleActionPerformed

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                // instantiate the first vehicle in the vehicle id list             
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);

                VehicleInfo info = vehicle.info();

                System.out.println(gson.toJson(info));
                res.append(gson.toJson(info) + "\n");

                JsonParser parser = new JsonParser();
                JsonObject obj = parser.parse(gson.toJson(info)).getAsJsonObject();
                String id = obj.get("id").getAsString();
                String make = obj.get("make").getAsString();
                String model = obj.get("model").getAsString();
                String year = obj.get("year").getAsString();
                res.append("Id = " + id + "\n");
                res.append("Make = " + make + "\n");
                res.append("Model = " + model + "\n");
                res.append("Year = " + year + "\n");

            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_VehicleActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        res.setText(" ");
    }//GEN-LAST:event_ClearActionPerformed

    private void EngineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EngineActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                String line = "";
                SmartcarResponse<VehicleIds> vehicleIdsResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdsResponse.getData().getVehicleIds();
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);
                String vin = vehicle.vin();
                SmartcarResponse<VehicleOil> oilResponse = vehicle.oil();
                VehicleOil oilData = oilResponse.getData();
                double oil = oilData.getLifeRemaining();
                line = "A vida útil restante do óleo do motor, em percentagem, é de " + oilData.getLifeRemaining() + ".";
                System.out.println(line);
                System.out.println(gson.toJson(line));
                res.append(gson.toJson("A vida útil restante do óleo do motor do carro " + vehicleIds[0] + ", em percentagem, é de " + oil + " de óleo.") + "\n");
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EngineActionPerformed

    private void BatteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BatteryActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                String line = "";
                SmartcarResponse<VehicleIds> vehicleIdsResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdsResponse.getData().getVehicleIds();
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);
                String vin = vehicle.vin();
                SmartcarResponse<VehicleBattery> batteryResponse = vehicle.battery();
                VehicleBattery batteryData = batteryResponse.getData();
                double bateria = batteryData.getPercentRemaining();
                line = "Atualmente, o carro " + vin + " encontra-se com " + bateria + " de bateria.";
                System.out.println(line);
                System.out.println(gson.toJson(line));
                res.append(gson.toJson("Atualmente, o carro " + vehicleIds[0] + " encontra-se com " + bateria + " de bateria.") + "\n");
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BatteryActionPerformed

    private void FuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FuelActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                String line = "";
                String line1 = "";
                String line2 = "";
                SmartcarResponse<VehicleIds> vehicleIdsResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdsResponse.getData().getVehicleIds();
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);
                String vin = vehicle.vin();
                SmartcarResponse<VehicleFuel> fuelResponse = vehicle.fuel();
                VehicleFuel fuelData = fuelResponse.getData();
                line = "O carro " + vin + " encontra-se com " + fuelData.getAmountRemaining() + " gallons no depósito.";
                line1 = " Corresponde a " + fuelData.getPercentRemaining() + " do depósito.";
                line2 = " Assim o carro pode percorrer estimadamente mais " + fuelData.getRange() + " quilómetros.";
                System.out.println(line);
                System.out.println(gson.toJson(line));
                res.append(gson.toJson("O carro " + vehicleIds[0] + " encontra-se com " + fuelData.getAmountRemaining() + " gallons no depósito.") + "\n");
                res.append(gson.toJson("Corresponde a " + fuelData.getPercentRemaining() + " do depósito.") + "\n");
                res.append(gson.toJson("Assim o carro pode percorrer estimadamente mais " + fuelData.getRange() + " quilómetros.") + "\n");
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FuelActionPerformed

    private void LocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                String line = "";
                SmartcarResponse<VehicleIds> vehicleIdsResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdsResponse.getData().getVehicleIds();
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);
                String vin = vehicle.vin();
                SmartcarResponse<VehicleLocation> locationResponse = vehicle.location();
                VehicleLocation locationData = locationResponse.getData();
                line = "O carro " + vin + " tem como localização " + locationData.getLatitude() + " de latitude e " + locationData.getLongitude() + " de longitude.";
                System.out.println(line);
                System.out.println(gson.toJson(line));
                res.append(gson.toJson("O carro " + vehicleIds[0] + " tem como localização " + locationData.getLatitude() + " de latitude e " + locationData.getLongitude() + " de longitude.") + "\n");
                OpenBrowser openBrowser = new OpenBrowser("https://www.google.pt/maps/place/" + locationData.getLatitude() + ", " + locationData.getLongitude());
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LocationActionPerformed

    private void OdometerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OdometerActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                String line = "";
                SmartcarResponse<VehicleIds> vehicleIdsResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdsResponse.getData().getVehicleIds();
                /*for (int x = 0; x < vehicleIds.length; x++) {*/
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);
                String vin = vehicle.vin();
                SmartcarResponse<VehicleOdometer> odometerResponse = vehicle.odometer();
                VehicleOdometer odometerData = odometerResponse.getData();
                double odometer = odometerData.getDistance();
                line = "O carro " + vin + " tem " + odometer + " quilómetros.";
                System.out.println(line);
                System.out.println(gson.toJson(line));
                res.append(gson.toJson("O carro " + vehicleIds[0] + " tem " + odometer + " quilómetros.") + "\n");
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_OdometerActionPerformed

    private void TiresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TiresActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                String line = "";
                String line1 = "";
                String line2 = "";
                String line3 = "";
                SmartcarResponse<VehicleIds> vehicleIdsResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdsResponse.getData().getVehicleIds();
                Vehicle vehicle = new Vehicle(vehicleIds[0], access);
                String vin = vehicle.vin();
                SmartcarResponse<VehicleTirePressure> tirePressure = vehicle.tirePressure();
                VehicleTirePressure tirePressureData = tirePressure.getData();
                double backleft = tirePressureData.getBackLeft();
                double backright = tirePressureData.getBackRight();
                double frontLeft = tirePressureData.getFrontLeft();
                double frontRight = tirePressureData.getFrontRight();
                line = "O carro encontra-se com a seguintes pressão em cada pneu respetivamente: O carro" + vehicleIds[0] + " apresenta o pneu de trás do lado esquerdo a " + backleft;
                line1 = " ,o pneu de trás do lado direito a " + backright;
                line2 = " ,o pneu da frente do lado esquerdo a " + frontLeft;
                line3 = " e, por fim, o pneu da frente do lado direito a " + frontRight + ".";
                System.out.println(line);
                System.out.println(gson.toJson(line));
                res.append(gson.toJson("O carro " + vehicleIds[0] + " apresenta o pneu de trás do lado esquerdo a " + backleft + " de pressão.") + "\n");
                res.append(gson.toJson("O pneu de trás do lado direito a " + backright + " de pressão.") + "\n");
                res.append(gson.toJson("O pneu da frente do lado esquerdo a " + frontLeft + " de pressão.") + "\n");
                res.append(gson.toJson("Por fim, o pneu da frente do lado direito a " + frontRight + " de pressão.") + "\n");
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_TiresActionPerformed

    private void VehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VehiclesActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\Utilizador\\AppData\\Local\\Temp\\access"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                // the list of vehicle ids
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();

                for (String a : vehicleIds) {
                    // instantiate the first vehicle in the vehicle id list
                    Vehicle vehicle = new Vehicle(a, access);

                    VehicleInfo info = vehicle.info();

                    System.out.println(gson.toJson(info));
                    res.append(gson.toJson(info) + "\n");

                    JsonParser parser = new JsonParser();
                    JsonObject obj = parser.parse(gson.toJson(info)).getAsJsonObject();
                    String id = obj.get("id").getAsString();
                    String make = obj.get("make").getAsString();
                    String model = obj.get("model").getAsString();
                    String year = obj.get("year").getAsString();
                    res.append("Id = " + id + "\n");
                    res.append("Make = " + make + "\n");
                    res.append("Model = " + model + "\n");
                    res.append("Year = " + year + "\n");
                }

            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_VehiclesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Battery;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Engine;
    private javax.swing.JButton Fuel;
    private javax.swing.JButton Location;
    private javax.swing.JButton Login;
    private javax.swing.JButton Odometer;
    private javax.swing.JButton Tires;
    private javax.swing.JButton Vehicle;
    private javax.swing.JButton Vehicles;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextArea res;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
